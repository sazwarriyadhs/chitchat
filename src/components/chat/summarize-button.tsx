"use client";

import { useState } from "react";
import { Sparkles, Loader2 } from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogDescription,
  DialogFooter,
} from "@/components/ui/dialog";
import { getSummary } from "@/app/actions";
import type { Message } from "./chat-message";
import { useToast } from "@/hooks/use-toast";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";

interface SummarizeButtonProps {
  messages: Message[];
}

export function SummarizeButton({ messages }: SummarizeButtonProps) {
  const [summary, setSummary] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState("");
  const [isOpen, setIsOpen] = useState(false);
  const { toast } = useToast();

  const handleSummarize = async () => {
    setIsLoading(true);
    setError("");
    setSummary("");

    const discussion = messages
      .map((m) => `${m.author}: ${m.text}`)
      .join("\n");

    const result = await getSummary(discussion);

    if (result.success) {
      setSummary(result.summary);
    } else {
      setError(result.error);
      toast({
        variant: "destructive",
        title: "Summarization Failed",
        description: result.error,
      });
    }

    setIsLoading(false);
  };

  const handleOpenChange = (open: boolean) => {
    setIsOpen(open);
    if (open) {
      // Reset state when dialog is opened
      setSummary("");
      setError("");
      handleSummarize();
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={handleOpenChange}>
      <DialogTrigger asChild>
        <Button variant="outline">
          <Sparkles className="mr-2 h-4 w-4" />
          Get me up to speed
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Discussion Summary</DialogTitle>
          <DialogDescription>
            Here's a quick summary of the conversation so far, generated by AI.
          </DialogDescription>
        </DialogHeader>
        <div className="py-4">
          {isLoading && (
            <div className="flex items-center justify-center gap-2 text-muted-foreground">
              <Loader2 className="h-5 w-5 animate-spin" />
              <span>Generating summary...</span>
            </div>
          )}
          {error && (
            <Alert variant="destructive">
              <AlertTitle>Error</AlertTitle>
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}
          {summary && (
            <div className="prose prose-sm dark:prose-invert max-h-[400px] overflow-y-auto rounded-md border bg-muted p-4 text-sm">
              <p>{summary}</p>
            </div>
          )}
        </div>
        <DialogFooter>
          <Button onClick={() => setIsOpen(false)}>Close</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
